// <auto-generated />
using GYM.DataAccessLayer.Asyn;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GYM.DataAccessLayer.Asyn.Migrations
{
    [DbContext(typeof(GymDbContextAsyn))]
    [Migration("20230404082839_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GYM.Entities.Asyn.CourseEntity", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseId"));

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("courseId");

                    b.ToTable("courseEntitity");
                });

            modelBuilder.Entity("GYM.Entities.Asyn.SalonEntity", b =>
                {
                    b.Property<int>("salonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("salonId"));

                    b.Property<string>("salonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("salonId");

                    b.ToTable("salonEntitity");
                });

            modelBuilder.Entity("GYM.Entities.Asyn.TranierEntity", b =>
                {
                    b.Property<int>("tranierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tranierId"));

                    b.Property<string>("tranierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tranierId");

                    b.ToTable("tranierEntitity");
                });

            modelBuilder.Entity("GYM.Entities.Asyn.UserEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("salonId")
                        .HasColumnType("int");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tranierId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("salonId");

                    b.HasIndex("tranierId");

                    b.ToTable("userEntitity");
                });

            modelBuilder.Entity("GYM.Entities.Asyn.UserEntity", b =>
                {
                    b.HasOne("GYM.Entities.Asyn.CourseEntity", "courseEntity")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GYM.Entities.Asyn.SalonEntity", "salonEntity")
                        .WithMany()
                        .HasForeignKey("salonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GYM.Entities.Asyn.TranierEntity", "tranierEntity")
                        .WithMany()
                        .HasForeignKey("tranierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseEntity");

                    b.Navigation("salonEntity");

                    b.Navigation("tranierEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
